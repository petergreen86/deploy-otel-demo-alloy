otelcol.receiver.otlp "default" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.receiver.otlp/

  // configures the default grpc endpoint "0.0.0.0:4317"
  grpc { }
  // configures the default http/protobuf endpoint "0.0.0.0:4318"
  http { }

  output {
    metrics = [otelcol.processor.resourcedetection.default.input]
    logs    = [otelcol.processor.resourcedetection.default.input]
    traces  = [otelcol.processor.resourcedetection.default.input]
  }
}

otelcol.processor.resourcedetection "default" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.resourcedetection/
  detectors = ["env", "system"] // add "gcp", "ec2", "ecs", "elastic_beanstalk", "eks", "lambda", "azure", "aks", "consul", "heroku"  if you want to use cloud resource detection

  system {
    hostname_sources = ["os"]
  }

  output {
    metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
    logs    = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
    traces  = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
  }
}

otelcol.processor.resource "set_deployment_environment" {
  attributes {
    set {
      key = "deployment.environment"
      value = "production" # Set your environment here
      action = "set"
    }
  }
  // Forward the data to the next component in the pipeline (e.g., batch processor)
  forward_to = [otelcol.processor.batch.default.input]
}

otelcol.processor.transform "drop_unneeded_resource_attributes" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.transform/
  error_mode = "ignore"

  trace_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }

  metric_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }

  log_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }

  output {
    metrics = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
    logs    = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
    traces  = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
  }

}

// (This component is not part of the starter AppOlly production config in Grafana's docs.)
// This adds a custom set of OTTL transformations that normalizes span names,
// to remove high-cardinality IDs (like cart ID, recommendation ID)
otelcol.processor.transform "reduce_otel_demo_cardinality" {

  error_mode = "ignore"

  trace_statements {
    context    = "span"
    statements = [
      "replace_match(name, \"GET /api/cart*\", \"GET /api/cart\")",
      "replace_match(name, \"GET /api/recommendations*\", \"GET /api/recommendations\")",
      "replace_match(name, \"GET /api/products*\", \"GET /api/products\")",
    ]
  }

  output {
    metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [
      otelcol.processor.batch.default.input,
      otelcol.connector.host_info.default.input,
    ]
  }
}

otelcol.connector.host_info "default" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.connector.host_info/
  host_identifiers = ["host.name"]

  output {
    metrics = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.transform "add_resource_attributes_as_metric_attributes" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.transform/
  error_mode = "ignore"

  metric_statements {
    context    = "datapoint"
    statements = [
      "set(attributes[\"deployment.environment\"], resource.attributes[\"deployment.environment\"])",
      "set(attributes[\"deployment.environment.name\"], resource.attributes[\"deployment.environment.name\"])",
      "set(attributes[\"service.version\"], resource.attributes[\"service.version\"])",
    ]
  }

  output {
    metrics = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.batch/
  output {
    metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
    logs    = [otelcol.exporter.otlphttp.loki_otlp.input]
    traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
  }
}

// (The next 2 components are not part of the starter AppOlly production config in Grafana's docs.)
remote.kubernetes.configmap "grafanacloud_otlphttp_configmap" {
  namespace = "collector"
  name = "grafanacloud-otlphttp-configmap"
}
remote.kubernetes.secret "grafanacloud_otlphttp_secret" {
  namespace = "collector"
  name = "grafanacloud-otlphttp-secret"
}

// (The next 2 components are modified from the starter AppOlly production config in Grafana's docs.)
otelcol.exporter.otlphttp "grafana_cloud" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.exporter.otlphttp/
  client {
    endpoint = remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data["url"]
    auth     = otelcol.auth.basic.grafana_cloud.handler
  }
}
otelcol.auth.basic "grafana_cloud" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.auth.basic/
  username = convert.nonsensitive(remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data["username"])
  password = remote.kubernetes.secret.grafanacloud_otlphttp_secret.data["otlp_password"]
}

// LOKI SPECIFIC CONFIG BELOW

otelcol.auth.basic "loki_grafana_cloud" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.auth.basic/
  username = convert.nonsensitive(remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data["loki_username"])
  password = remote.kubernetes.secret.grafanacloud_otlphttp_secret.data["loki_password"]
}

otelcol.exporter.otlphttp "loki_otlp" {
  // https://grafana.com/docs/alloy/latest/reference/components/otelcol.exporter.otlphttp/
  client {
    endpoint = remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data["loki_url"]
    auth     = otelcol.auth.basic.loki_grafana_cloud.handler
  }
}

